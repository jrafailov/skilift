library(R6)
library(jsonlite)
library(data.table)

PGVdb <- R6Class("PGVdb",
  private = list(
    json_file = NULL
  ),
  public = list(
    metadata = NULL,
    plots = NULL,
    datadir = NULL,
    publicdir = NULL,
    settings = NULL,
    initialize = function(json_file, datadir, publicdir, settings) {
      private$json_file <- json_file
      self$load_json(json_file)
      self$datadir <- datadir
      self$publicdir <- publicdir
      self$settings <- settings
    },
    # Function to load JSON and assign to the metadata and plots attributes
    load_json = function(json_file) {
      json_data <- jsonlite::fromJSON(json_file)

      # Extract metadata
      metadata_list <- lapply(names(json_data), function(patient_id) {
        patient_data <- json_data[[patient_id]]
        ref <- patient_data$reference
        tags <- list(patient_data$description) # Store tags as a list

        data.table(
          patient.id = patient_id,
          ref = ref,
          tags = tags
        )
      })

      self$metadata <- data.table::rbindlist(metadata_list)
      setnames(self$metadata, old = names(self$metadata), new = c("patient.id", "ref", "tags")) # Rename columns

      # Extract plots
      plots_list <- lapply(names(json_data), function(patient_id) {
        patient_data <- json_data[[patient_id]]
        patient_plots <- patient_data$plots

        plot_ids <- seq_along(patient_plots)

        print(type(patient_plots))
        sample <- sapply(patient_plots, function(plot) {
          ifelse("sample" %in% names(plot), plot$sample, NA)
        })
        type <- sapply(patient_plots, function(plot) ifelse("type" %in% names(plot), plot$type, NA))
        source <- sapply(patient_plots, function(plot) ifelse("source" %in% names(plot), plot$source, NA))
        visible <- sapply(patient_plots, function(plot) ifelse("visible" %in% names(plot), plot$visible, NA))
        title <- sapply(patient_plots, function(plot) ifelse("title" %in% names(plot), plot$title, NA))
        figure <- sapply(patient_plots, function(plot) ifelse("figure" %in% names(plot), plot$figure, NA))
        server <- sapply(patient_plots, function(plot) ifelse("server" %in% names(plot), plot$server, NA))
        uuid <- sapply(patient_plots, function(plot) ifelse("uuid" %in% names(plot), plot$uuid, NA))

        data.table(
          plot.id = plot_ids,
          patient.id = rep(patient_id, length(patient_plots)),
          sample = sample,
          type = type,
          source = source,
          visible = visible,
          title = title,
          figure = figure,
          server = server,
          uuid = uuid
        )
      })

      self$plots <- data.table::rbindlist(plots_list)
    },
    write_json = function() {
      # Create a backup file with timestamp
      timestamp <- format(Sys.time(), "%Y%m%d_%H%M%S")
      backup_file <- paste0(self$json_file, ".", timestamp)
      file.copy(self$json_file, backup_file)

      # Create a list to store patient data
      patient_list <- list()

      # Iterate over unique patient IDs
      unique_patients <- unique(self$metadata$patient.id)
      for (patient_id in unique_patients) {
        # Filter metadata and plots based on patient ID
        patient_metadata <- self$metadata[patient.id == patient_id]
        patient_plots <- self$plots[patient.id == patient_id]

        # Get tags, reference, and plots for the patient
        tags <- patient_metadata$tags[[1]]
        ref <- patient_metadata$ref
        plots <- list()

        # Iterate over each plot for the patient
        for (i in seq_len(nrow(patient_plots))) {
          # Extract plot data
          print(patient_plots$sample[i])
          plot_id <- patient_plots$plot.id[i]
          sample <- patient_plots$sample[i]
          type <- patient_plots$type[i]
          source <- patient_plots$source[i]
          visible <- patient_plots$visible[i]
          title <- patient_plots$title[i]
          figure <- patient_plots$figure[i]
          server <- patient_plots$server[i]
          uuid <- patient_plots$uuid[i]

          # Create a plot object
          plot_obj <- list(
            plot.id = plot_id,
            patient.id = patient_id,
            sample = sample,
            type = type,
            source = source,
            visible = visible
          )

          # Add optional attributes if they exist
          if (!is.na(title)) plot_obj$title <- title
          if (!is.na(figure)) plot_obj$figure <- figure
          if (!is.na(server)) plot_obj$server <- server
          if (!is.na(uuid)) plot_obj$uuid <- uuid

          # Add the plot to the plots list
          plots[[i]] <- plot_obj
        }

        # Create the patient object
        patient_obj <- list(
          description = tags,
          reference = ref,
          plots = plots
        )

        # Add the patient object to the patient list
        patient_list[[patient_id]] <- patient_obj
      }

      # Create the final JSON object
      json_data <- as.data.frame(patient_list)

      # Convert any NULL values to NA
      json_data[is.null(json_data)] <- NA

      # Write the JSON object to a file
      # writeLines(jsonlite::toJSON(json_data, pretty = TRUE), file = self$settings)
    }
  )
)

datafiles.json <- "~/projects/pgv/public/datafiles.json"
datadir <- "~/projects/pgv/public/data"
publicdir <- "~/projects/pgv/public"
settings <- "~/projects/pgv/public/settings.json"

db <- PGVdb$new(datafiles.json, datadir, publicdir, settings)
# db$drop_patient("TEST")
# db$write_json()
# writeLines(db$to_json(), "test.datafiles.json")
# filtered_patients <- db$filter_by_patient_id("E")
